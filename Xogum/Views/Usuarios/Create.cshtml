@model Xogum.ViewModels.Usuario.UsuarioViewModel

@{
    ViewBag.Title = "Create";
}

@*<img class="img-responsive" src="~/Content/Imagens/cadastrousuario.png" />*@
<h2 class="text-center">Cadastro de Clientes</h2>

@using (Html.BeginForm("Create", "Usuarios", FormMethod.Post, new { enctype = "multipart/form-data" }))
{

    @Html.AntiForgeryToken()
    <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-core.js"></script>
    <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-service.js"></script>
    <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-ui.js"></script>
    <script type="text/javascript" src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js"></script>
    <link rel="stylesheet" type="text/css"
          href="https://js.api.here.com/v3/3.1/mapsjs-ui.css" />
    <div class="container">
        <script>
            // definição da chave da api para utilização
            var platform = new H.service.Platform({
                apikey: 'q_elI5myVl5U1fdw7ljnDng2unbifJRBGtOTChlKsFQ',
                useHTTPS: true,
                useCIT: true
            });
            // Componente para gerar a posição de aonde o usuário está no momento
            var geocoderService = platform.getGeocodingService();
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition
                    (position => {
                        geocoderService.reverseGeocode(
                            {
                                mode: "retrieveAddress",
                                maxresults: 1,
                                prox: position.coords.latitude + ","
                                    + position.coords.longitude
                            },
                            success => {
                                var { latitude, longitude } = position.coords;
                                $(document).ready(function () {
                                    document.getElementById("local").value = latitude + "," + longitude;
                                });
                            },
                            error => {
                                console.error(error);
                            }
                        );
                    })
            }
        </script>
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
        <input type="hidden" id="local" name="local" />
        
        <div class="espaco">
            <div class="row espaco-form">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DataNascimento, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.DataNascimento, new { htmlAttributes = new { @class = "form-control " } })
                            @Html.ValidationMessageFor(model => model.DataNascimento, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row espaco-form">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>

            </div>

            <div class="row espaco-form">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Senha, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Senha, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Senha, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.ConfirmaSenha, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ConfirmaSenha, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ConfirmaSenha, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row espaco-form">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Telefone, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Telefone, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Telefone, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Cpf, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Cpf, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Cpf, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>

            <div class="row espaco-form">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Foto, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <input type="file" name="arq" />
                        </div>
                    </div>
                </div>
            </div>
            @*<div class="form-group">
                    @Html.LabelFor(model => model.TipoUsuarioId, "TipoUsuarioId", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownList("TipoUsuarioId", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TipoUsuarioId, "", new { @class = "text-danger" })
                    </div>
                </div>*@

            <div class="form-group espaco text-center espaco-baixo">
                <div class="col-md col-md-12">
                    <input type="submit" value="Finalizar Cadastro" class="btn btn-success" />
                </div>
            </div>
        </div>
    </div>

}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/Content/jQuery-Mask-Plugin-master/src/jquery.mask.js")
}
